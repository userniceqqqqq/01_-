<UserControl x:Class="FamilyManager.MainModule.SubEdit.Views.EditContentView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:prism="http://prismlibrary.com/"
             prism:ViewModelLocator.AutoWireViewModel="True"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:local="clr-namespace:FamilyManager.MainModule.SubEdit.Views"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" 
             xmlns:enum="clr-namespace:FamilyManager.MainModule.SubEdit"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="#11233B"/>

        <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="#FFABADB3"/>
            <Setter Property="Background" Value="#F6F7F8"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FEC5A8"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type Button}">
            <Border x:Name="border" CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
        </ControlTemplate>

        <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="Foreground" Value="#11233B"/>
            <Setter Property="Background" Value="#F6F7F8"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type ComboBoxItem}">
                        <Setter Property="Foreground" Value="#11233B"/>
                        <Setter Property="IsSelected" Value="{Binding IsSelect,Mode=OneWay}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FEC5A8"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboBoxControlTemplate1" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                    <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                        <Border x:Name="DropDownBorder" BorderBrush="#FFACACAC" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                            <Setter Property="IsTabStop" Value="False"/>
                            <Setter Property="Focusable" Value="False"/>
                            <Setter Property="ClickMode" Value="Press"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border x:Name="templateRoot" BorderBrush="#FFACACAC" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                                            <Border.Background>
                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                    <GradientStop Color="#FFF0F0F0" Offset="0"/>
                                                    <GradientStop Color="#FFE5E5E5" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Border.Background>
                                            <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                <Path x:Name="Arrow" Data="F1M0,0L2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0z" Fill="#FF606060" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                                            </Border>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFABADB3"/>
                                                <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                                            </MultiDataTrigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Fill" TargetName="Arrow" Value="Black"/>
                                            </Trigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                            <GradientStop Color="#FEC5A8" Offset="0"/>
                                                            <GradientStop Color="#FEC5A8" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <!--<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF7EB4EA"/>-->
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF7EB4EA"/>
                                                <Setter Property="Background" TargetName="splitBorder">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                            <GradientStop Color="#FFEBF4FC" Offset="0"/>
                                                            <GradientStop Color="#FFDCECFC" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF7EB4EA"/>
                                            </MultiDataTrigger>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter Property="Fill" TargetName="Arrow" Value="Black"/>
                                            </Trigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                            <GradientStop Color="#FEC5A8" Offset="0"/>
                                                            <GradientStop Color="#FEC5A8" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <!--<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>-->
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>
                                                <Setter Property="Background" TargetName="splitBorder">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                            <GradientStop Color="#FFDAEBFC" Offset="0"/>
                                                            <GradientStop Color="#FFC4E0FC" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF569DE5"/>
                                            </MultiDataTrigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Fill" TargetName="Arrow" Value="#FFBFBFBF"/>
                                            </Trigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="#FFF0F0F0"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFD9D9D9"/>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFBFBFBF"/>
                                                <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                                            </MultiDataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{DynamicResource ComboBoxSelectTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="False">
                    <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="True"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                </MultiTrigger>
                <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <DataTemplate x:Key="ComboBoxSelectTemplate">
            <Button Content="{Binding Display}" Padding="0" BorderThickness="0" Background="{x:Null}"/>
        </DataTemplate>

    </UserControl.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="300"></ColumnDefinition>
            <ColumnDefinition></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition></RowDefinition>
            <RowDefinition Height="50"></RowDefinition>
        </Grid.RowDefinitions>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition></RowDefinition>
                <RowDefinition Height="115"></RowDefinition>
                <RowDefinition Height="115"></RowDefinition>
            </Grid.RowDefinitions>

            <GroupBox Margin="5" BorderBrush="Gray"  Width="290">
                <GroupBox.Header>
                    <TextBlock Text="获取族" Foreground="#FFFD6011"></TextBlock>
                </GroupBox.Header>
                <Grid Margin="0,5,0,0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="28"></RowDefinition>
                        <RowDefinition Height="26"></RowDefinition>
                        <RowDefinition></RowDefinition>
                        <RowDefinition Height="28"></RowDefinition>
                    </Grid.RowDefinitions>
                    <ComboBox ItemsSource="{Binding FamilySourceWays}" DisplayMemberPath="Display" SelectedValuePath="Select" SelectedValue="{Binding CurFamilySource}" 
                               Style="{StaticResource ComboBoxStyle}" Template="{DynamicResource ComboBoxControlTemplate1}" Margin="0,0,0,2"/>
                    <ComboBox Grid.Row="1" ItemsSource="{Binding FamilyTypeWays}" DisplayMemberPath="Display" SelectedValuePath="Select" SelectedValue="{Binding CurFamilyType}" 
                               Style="{StaticResource ComboBoxStyle}" Template="{DynamicResource ComboBoxControlTemplate1}"/>
                    <TreeView Grid.Row="2" ItemsSource="{Binding RootTreeModels}" Margin="0,2,0,0">

                        <!--#region 默认展开所有节点 -->
                        <TreeView.ItemContainerStyle>
                            <Style TargetType="TreeViewItem">
                                <Setter Property="IsExpanded" Value="True"/>
                            </Style>
                        </TreeView.ItemContainerStyle>
                        <!--#endregion-->

                        <TreeView.ItemTemplate>
                            <HierarchicalDataTemplate ItemsSource="{Binding TreeModels}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>

                                    <CheckBox IsChecked="{Binding IsCheck, Mode=OneWay}">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="Click">
                                                <i:InvokeCommandAction Command="{Binding DataContext.CatagorySelectCommand, RelativeSource={RelativeSource AncestorType=UserControl, Mode=FindAncestor}}" CommandParameter="{Binding}" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                        <TextBlock Grid.Column="1" Text="{Binding Name}" />
                                    </CheckBox>
                                </Grid>
                            </HierarchicalDataTemplate>
                        </TreeView.ItemTemplate>
                    </TreeView>
                    <ComboBox Grid.Row="3" ItemsSource="{Binding EditNameWays}" DisplayMemberPath="Display" SelectedValuePath="Select" SelectedValue="{Binding CurEditName}"  
                              Template="{DynamicResource ComboBoxControlTemplate1}" Margin="0,2,0,0">
                        <ComboBox.Resources>
                            <Style TargetType="{x:Type ComboBox}">
                                <Setter Property="IsEnabled" Value="{Binding IsLoadFamily}"></Setter>
                                <Setter Property="Foreground" Value="#11233B"/>
                                <Setter Property="Background" Value="#F6F7F8"/>
                                <Setter Property="VerticalContentAlignment" Value="Center"/>
                                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
                                <Setter Property="ItemContainerStyle">
                                    <Setter.Value>
                                        <Style TargetType="{x:Type ComboBoxItem}">
                                            <Setter Property="Foreground" Value="#11233B"/>
                                            <Setter Property="IsSelected" Value="{Binding IsSelect,Mode=OneWay}"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                                            <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="#FEC5A8"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ComboBox.Resources>
                    </ComboBox>
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="1" Margin="5,0,5,5" BorderBrush="Gray"  Width="290">
                <GroupBox.Header>
                    <TextBlock Text="查找/替换" Foreground="#FFFD6011"/>
                </GroupBox.Header>
                <StackPanel Margin="0,5,0,0">
                    <TextBox Text="{Binding SrerchText,UpdateSourceTrigger=PropertyChanged}">
                        <TextBox.Resources>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="CornerRadius" Value="3"/>
                            </Style>
                            <VisualBrush x:Key="SearchTextBox" TileMode="None" Opacity="0.5" Stretch="None" AlignmentX="Left">
                                <VisualBrush.Visual>
                                    <TextBlock FontStyle="Italic" FontSize="10"  Text="查找......"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </TextBox.Resources>
                        <TextBox.Style>
                            <Style TargetType="TextBox">
                                <Style.Triggers>
                                    <Trigger Property="Text" Value="{x:Null}">
                                        <Setter Property="Background" Value="{StaticResource SearchTextBox}"/>
                                    </Trigger>
                                    <Trigger Property="Text" Value="">
                                        <Setter Property="Background" Value="{StaticResource SearchTextBox}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                    <!--<TextBox Text="233"></TextBox>-->
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,2,0,0">
                        <Button Width="50" HorizontalAlignment="Right" FontSize="10" Margin="0,0,3,0" Style="{StaticResource ButtonStyle}" Template="{StaticResource ButtonTemplate}" Command="{Binding FindNextCommand}">逐个</Button>
                        <Button Width="50" HorizontalAlignment="Right" FontSize="10" Style="{StaticResource ButtonStyle}" Template="{StaticResource ButtonTemplate}" Command="{Binding FindAllCommand}">所有</Button>
                    </StackPanel>
                    <Separator Margin="0,3"></Separator>
                    <TextBox Text="{Binding ReplaceText}">
                        <TextBox.Resources>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="CornerRadius" Value="3"/>
                            </Style>
                            <VisualBrush x:Key="ReplaceTextBox" TileMode="None" Opacity="0.5" Stretch="None" AlignmentX="Left">
                                <VisualBrush.Visual>
                                    <TextBlock FontStyle="Italic" FontSize="10"  Text="替换......"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </TextBox.Resources>
                        <TextBox.Style>
                            <Style TargetType="TextBox">
                                <Style.Triggers>
                                    <Trigger Property="Text" Value="{x:Null}">
                                        <Setter Property="Background" Value="{StaticResource ReplaceTextBox}"/>
                                    </Trigger>
                                    <Trigger Property="Text" Value="">
                                        <Setter Property="Background" Value="{StaticResource ReplaceTextBox}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                    <Button Width="50" HorizontalAlignment="Right" FontSize="10" Margin="0,2,0,0" Style="{StaticResource ButtonStyle}" Template="{StaticResource ButtonTemplate}"  Command="{Binding ReplaceSelectCommand}" IsEnabled="{Binding SelectQueueIsNotNull}" Content="选择项"/>
                </StackPanel>
            </GroupBox>
            <GroupBox Grid.Row="2" Margin="5,0,5,5" BorderBrush="Gray"  Width="290">
                <GroupBox.Header>
                    <TextBlock Text="前缀/后缀" Foreground="#FFFD6011"/>
                </GroupBox.Header>
                <StackPanel Margin="0,5,0,0">
                    <TextBox Text="{Binding PrefixText}">
                        <TextBox.Resources>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="CornerRadius" Value="3"/>
                            </Style>
                            <VisualBrush x:Key="PrefixTextBox" TileMode="None" Opacity="0.5" Stretch="None" AlignmentX="Left">
                                <VisualBrush.Visual>
                                    <TextBlock FontStyle="Italic" FontSize="10"  Text="前缀......"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </TextBox.Resources>
                        <TextBox.Style>
                            <Style TargetType="TextBox">
                                <Style.Triggers>
                                    <Trigger Property="Text" Value="{x:Null}">
                                        <Setter Property="Background" Value="{StaticResource PrefixTextBox}"/>
                                    </Trigger>
                                    <Trigger Property="Text" Value="">
                                        <Setter Property="Background" Value="{StaticResource PrefixTextBox}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,2,0,0">
                        <Button Width="50" HorizontalAlignment="Right" FontSize="10" Margin="0,0,3,0" Style="{StaticResource ButtonStyle}" Template="{StaticResource ButtonTemplate}" Command="{Binding PrefixSelectCommand}">选择项</Button>
                        <Button Width="50" HorizontalAlignment="Right" FontSize="10"  Style="{StaticResource ButtonStyle}" Template="{StaticResource ButtonTemplate}" Command="{Binding PrefixAllCommand}">所有项</Button>
                    </StackPanel>
                    <Separator Margin="0,3"></Separator>
                    <TextBox Text="{Binding SuffixText}">
                        <TextBox.Resources>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="CornerRadius" Value="3"/>
                            </Style>
                            <VisualBrush x:Key="SuffixTextBox" TileMode="None" Opacity="0.5" Stretch="None" AlignmentX="Left">
                                <VisualBrush.Visual>
                                    <TextBlock FontStyle="Italic" FontSize="10"  Text="后缀......"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </TextBox.Resources>
                        <TextBox.Style>
                            <Style TargetType="TextBox">
                                <Style.Triggers>
                                    <Trigger Property="Text" Value="{x:Null}">
                                        <Setter Property="Background" Value="{StaticResource SuffixTextBox}"/>
                                    </Trigger>
                                    <Trigger Property="Text" Value="">
                                        <Setter Property="Background" Value="{StaticResource SuffixTextBox}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,2,0,0">
                        <Button Width="50" HorizontalAlignment="Right" FontSize="10" Margin="0,0,3,0" Style="{StaticResource ButtonStyle}" Template="{StaticResource ButtonTemplate}" Command="{Binding SuffixSelectCommand}">选择项</Button>
                        <Button Width="50" HorizontalAlignment="Right" FontSize="10"  Style="{StaticResource ButtonStyle}" Template="{StaticResource ButtonTemplate}" Command="{Binding SuffixAllCommand}">所有项</Button>
                    </StackPanel>
                </StackPanel>
            </GroupBox>

        </Grid>
        <!--<StackPanel HorizontalAlignment="Center">
            
        </StackPanel>-->
        <!--注意：SelectedItems是只读属性，不能直接绑定DataGrid的SelectedItems属性-->
        <!--两种解决方法：1、绑定DataGridRow的IsSelected属性(采用)  2、绑定SelectionChanged事件，传参SelectedItems到VM(如何实现VM—>M?) -->
        <DataGrid Grid.Column="1" Margin="15,15,15,5"
                ItemsSource="{Binding CurFamilysData}"               
                HeadersVisibility="Column"
                AutoGenerateColumns="False"
                Background="#fff"
                BorderBrush="Transparent"
                CanUserAddRows="False"
                GridLinesVisibility="None"
                HorizontalScrollBarVisibility="Hidden"
                VerticalScrollBarVisibility="Auto"                      
                IsReadOnly="False"
                  
                EnableRowVirtualization="True"
                EnableColumnVirtualization="True"
                VirtualizingStackPanel.VirtualizationMode="Standard"
                VirtualizingStackPanel.IsVirtualizing="True">
            

            <i:Interaction.Triggers>
                <i:EventTrigger EventName="CellEditEnding" >
                    <prism:InvokeCommandAction Command="{Binding CellEditEndingCommand}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <DataGrid.Resources>
                <Style TargetType="DataGridColumnHeader">
                    
                    <!--<Setter Property="Height" Value="26"/>
                    <Setter Property="BorderThickness" Value="0,1,1,1"/>
                    <Setter Property="Background" Value="#F6F7F8" />
                    <Setter Property="BorderBrush" Value="#FFABADB3" />-->
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="FontWeight" Value="Bold" />
                </Style>

                <Style TargetType="DataGridRow">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsEdit}" Value="True">
                            <Setter Property="Background" Value="#FFF6D3"></Setter>
                        </DataTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#FEC5A8"></Setter>
                        </Trigger>
                    </Style.Triggers>
                    <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                    
                </Style>

                <Style TargetType="DataGridCell">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsReportError}" Value="True">
                            <Setter Property="Background" Value="#9becc9"></Setter>
                        </DataTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#FEC5A8"></Setter>
                        </Trigger>
                    </Style.Triggers>
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="BorderThickness" Value="0"/>
                </Style>

                <DataTemplate x:Key="ReadonlyCellTemplate">
                    <TextBlock Text="{Binding FamilyName}" />
                </DataTemplate>
                <DataTemplate x:Key="EditableCellTemplate">
                    <TextBox  Name="EditTextBox" Text="{Binding FamilyName}" FocusManager.FocusedElement="{Binding RelativeSource={RelativeSource Self}}"/>
                </DataTemplate>
            </DataGrid.Resources>

            <DataGrid.Columns>
                <DataGridTextColumn Header="类别名" Binding="{Binding CategoryName}" IsReadOnly="True" Width="*">
                    <DataGridTextColumn.HeaderStyle>
                        <Style TargetType="{x:Type DataGridColumnHeader}">
                            <!--<Setter Property="Height" Value="26"/>
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="Background" Value="#F6F7F8" />
                            <Setter Property="BorderBrush" Value="#FFABADB3" />-->
                            <Setter Property="HorizontalContentAlignment" Value="Center" />
                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                            <Setter Property="FontWeight" Value="Bold" />
                        </Style>
                    </DataGridTextColumn.HeaderStyle>
                </DataGridTextColumn>
                <DataGridTemplateColumn Header="族名" CellTemplate="{StaticResource ReadonlyCellTemplate}" Width="*" IsReadOnly="{Binding }">
                    <DataGridTemplateColumn.CellEditingTemplate>
                        <DataTemplate>
                            <ContentPresenter x:Name="Presenter" Content="{Binding}" ContentTemplate="{StaticResource ReadonlyCellTemplate}" />
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding DataContext.IsLoadFamily, RelativeSource={RelativeSource AncestorType=UserControl, Mode=FindAncestor}}" Value="True">
                                    <Setter TargetName="Presenter" Property="ContentTemplate" Value="{StaticResource EditableCellTemplate}" />
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellEditingTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Header="族类型名" Binding="{Binding FamilyTypeName}" Width="*"/>
            </DataGrid.Columns>
        </DataGrid>
        
        <StackPanel Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,10,0,0">
            <Button Margin="0,0,10,0" Content="清除" Width="50" FontSize="10" Style="{StaticResource ButtonStyle}" Template="{StaticResource ButtonTemplate}" Command="{Binding ClearCommand}"></Button>
        </StackPanel>
        <StackPanel Grid.Row="1" Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Top" Orientation="Horizontal" Margin="0,10,0,0">
            <Button Margin="0,0,10,0" Content="后退" Width="50" FontSize="10" Style="{StaticResource ButtonStyle}" Template="{StaticResource ButtonTemplate}"  IsEnabled="{Binding BackIsNotNull}" Command="{Binding BackCommand}"/>

            <Button Margin="0,0,10,0" Content="前进" Width="50" FontSize="10" Style="{StaticResource ButtonStyle}" Template="{StaticResource ButtonTemplate}" IsEnabled="{Binding ForwardIsNotNull}" Command="{Binding ForwardCommand}"/>
            <Button Margin="0,0,10,0"  Content="重置" Width="50" FontSize="10" Style="{StaticResource ButtonStyle}" Template="{StaticResource ButtonTemplate}" Command="{Binding UnioCommand}"/>
            <Button Margin="0,0,15,0"  Content="应用" Width="50" FontSize="10" Style="{StaticResource ButtonStyle}" Template="{StaticResource ButtonTemplate}" Command="{Binding ApplyCommand}" />
        </StackPanel>
    </Grid>
</UserControl>
